{"version":3,"sources":["actions/actionTypes.js","components/ServiceAdd.js","actions/actionCreators.js","components/ServiceList.js","components/ServiceFilter.js","App.js","serviceWorker.js","reducers/serviceList.js","reducers/serviceAdd.js","reducers/serviceFilter.js","store/index.js","index.js"],"names":["ADD_SERVICE","REMOVE_SERVICE","EDIT_SERVICE","CANCEL_SERVICE","CHANGE_SERVICE_FIELD","FILTER_SERVICE_FIELD","ServiceAdd","item","useSelector","state","serviceAdd","dispatch","useDispatch","handleChange","useCallback","evt","target","name","value","type","payload","changeServiceField","handleSubmit","id","price","preventDefault","handleCancel","onSubmit","onChange","onClick","ServiceList","items","serviceList","handleRemove","removeService","handleEdit","editService","map","o","className","ServiceFilter","props","serviceFilter","event","filterService","App","Boolean","window","location","hostname","match","initialState","nanoid","reducer","combineReducers","action","Number","filter","service","includes","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7254bccd.chunk.js","sourcesContent":["export const ADD_SERVICE = \"ADD_SERVICE\";\nexport const REMOVE_SERVICE = \"REMOVE_SERVICE\";\nexport const EDIT_SERVICE = \"EDIT_SERVICE\";\nexport const CANCEL_SERVICE = \"CANCEL_SERVICE\";\nexport const CHANGE_SERVICE_FIELD = \"CHANGE_SERVICE_FIELD\";\nexport const FILTER_SERVICE_FIELD = \"FILTER_SERVICE_FIELD\";","import React, { useCallback } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport {\n  changeServiceField,\n  addService,\n  cancelService,\n} from \"../actions/actionCreators\";\n\nfunction ServiceAdd() {\n  const item = useSelector((state) => state.serviceAdd);\n  const dispatch = useDispatch();\n\n  const handleChange = useCallback(\n    (evt) => {\n      const { name, value } = evt.target;\n      dispatch(changeServiceField(name, value));\n    },\n    [dispatch]\n  );\n\n  const handleSubmit = useCallback(\n    (evt) => {\n      evt.preventDefault();\n      dispatch(addService(item.id, item.name, item.price));\n    },\n    [dispatch, item.id, item.name, item.price]\n  );\n\n  const handleCancel = useCallback(\n    (evt) => {\n      evt.preventDefault();\n      dispatch(cancelService());\n    },\n    [dispatch]\n  );\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input name=\"name\" onChange={handleChange} value={item.name} />\n      <input name=\"price\" onChange={handleChange} value={item.price} />\n      <button type=\"submit\">Save</button>\n      <button onClick={handleCancel}>Cancel</button>\n    </form>\n  );\n}\n\nexport default ServiceAdd;\n","import {\n    CHANGE_SERVICE_FIELD,\n    EDIT_SERVICE,\n    CANCEL_SERVICE,\n    ADD_SERVICE,\n    REMOVE_SERVICE,\n    FILTER_SERVICE_FIELD,\n  } from \"./actionTypes\";\n  \n  export const changeServiceField = (name, value) => ({\n    type: CHANGE_SERVICE_FIELD,\n    payload: {\n      name,\n      value\n    }\n  });\n  \n  export const addService = (id, name, price) => ({\n    type: ADD_SERVICE,\n    payload: {\n      id,\n      name,\n      price\n    }\n  });\n  \n  export const removeService = id => ({\n    type: REMOVE_SERVICE,\n    payload: {\n      id\n    }\n  });\n  \n  export const cancelService = () => ({\n    type: CANCEL_SERVICE\n  });\n  \n  export const editService = (id, name, price) => ({\n    type: EDIT_SERVICE,\n    payload: {\n      id,\n      name,\n      price\n    }\n  });\n  \n  export const filterService = (value) => ({\n    type: FILTER_SERVICE_FIELD,\n    payload: {\n      value\n    },\n  });\n  ","import React, { useCallback } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { removeService, editService } from \"../actions/actionCreators\";\n\nfunction ServiceList() {\n  const items = useSelector((state) => state.serviceList);\n  const dispatch = useDispatch();\n\n  const handleRemove = useCallback(\n    (id) => {\n      dispatch(removeService(id));\n    },\n    [dispatch]\n  );\n\n  const handleEdit = useCallback(\n    (id, name, price) => {\n      dispatch(editService(id, name, price));\n    },\n    [dispatch]\n  );\n\n  return (\n    <ul>\n      {items.map((o) => (\n        <li key={o.id}>\n          {o.name} {o.price}\n          <button onClick={() => handleEdit(o.id, o.name, o.price)}>\n            <i className =\"edit icon\"></i>\n          </button>\n          <button onClick={() => handleRemove(o.id)}>\n            <i className =\"trash alternate icon\"></i>\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n}\n\nexport default ServiceList;\n","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { filterService } from \"../actions/actionCreators.js\";\n\nexport default function ServiceFilter(props) {\n  const item = useSelector((state) => state.serviceFilter);\n  const dispatch = useDispatch();\n\n  const handleChange = (event) => {\n    const { value } = event.target;\n    dispatch(filterService(value));\n  };\n\n  return (\n    <form className=\"filter\">\n      <i className=\"filter icon\"></i>\n      <input name=\"value\" onChange={handleChange} value={item.value} />\n    </form>\n  );\n}\n","import React, { Fragment } from \"react\";\nimport ServiceAdd from \"./components/ServiceAdd\";\nimport ServiceList from \"./components/ServiceList\";\nimport ServiceFilter from \"./components/ServiceFilter.js\";\n\nfunction App() {\n  return (\n    <Fragment>\n      <ServiceAdd />\n      <ServiceList />\n      < hr />\n      <ServiceFilter />\n    </Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n      // [::1] is the IPv6 localhost address.\n      window.location.hostname === '[::1]' ||\n      // 127.0.0.1/8 is considered localhost for IPv4.\n      window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n      )\n  );\n  \n  export function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n      // The URL constructor is available in all browsers that support SW.\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n      if (publicUrl.origin !== window.location.origin) {\n        // Our service worker won't work if PUBLIC_URL is on a different origin\n        // from what our page is served on. This might happen if a CDN is used to\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n        return;\n      }\n  \n      window.addEventListener('load', () => {\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n  \n        if (isLocalhost) {\n          // This is running on localhost. Let's check if a service worker still exists or not.\n          checkValidServiceWorker(swUrl, config);\n  \n          // Add some additional logging to localhost, pointing developers to the\n          // service worker/PWA documentation.\n          navigator.serviceWorker.ready.then(() => {\n            console.log(\n              'This web app is being served cache-first by a service ' +\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\n            );\n          });\n        } else {\n          // Is not localhost. Just register service worker\n          registerValidSW(swUrl, config);\n        }\n      });\n    }\n  }\n  \n  function registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n      .register(swUrl)\n      .then(registration => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          if (installingWorker == null) {\n            return;\n          }\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the updated precached content has been fetched,\n                // but the previous service worker will still serve the older\n                // content until all client tabs are closed.\n                console.log(\n                  'New content is available and will be used when all ' +\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                );\n  \n                // Execute callback\n                if (config && config.onUpdate) {\n                  config.onUpdate(registration);\n                }\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.');\n  \n                // Execute callback\n                if (config && config.onSuccess) {\n                  config.onSuccess(registration);\n                }\n              }\n            }\n          };\n        };\n      })\n      .catch(error => {\n        console.error('Error during service worker registration:', error);\n      });\n  }\n  \n  function checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n      .then(response => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        const contentType = response.headers.get('content-type');\n        if (\n          response.status === 404 ||\n          (contentType != null && contentType.indexOf('javascript') === -1)\n        ) {\n          // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then(registration => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n          // Service worker found. Proceed as normal.\n          registerValidSW(swUrl, config);\n        }\n      })\n      .catch(() => {\n        console.log(\n          'No internet connection found. App is running in offline mode.'\n        );\n      });\n  }\n  \n  export function unregister() {\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.ready.then(registration => {\n        registration.unregister();\n      });\n    }\n  }\n  ","import { nanoid } from 'nanoid';\nimport {ADD_SERVICE, REMOVE_SERVICE, FILTER_SERVICE_FIELD} from '../actions/actionTypes'\n\nconst initialState = [\n  {id: nanoid(), name: 'Замена стекла', price: 21000},\n  {id: nanoid(), name: 'Замена дисплея', price: 25000},\n  {id: nanoid(), name: 'Замена аккумулятора', price: 4000},\n  {id: nanoid(), name: 'Замена микрофона', price: 2500},\n];\n\nexport default function serviceListReducer(state = initialState, action) {\n  switch (action.type) {\n    \n    case ADD_SERVICE:\n      const {name, price} = action.payload;\n      return [...state, {id: nanoid(), name, price: Number(price)}];\n    \n      case REMOVE_SERVICE:\n      const {id} = action.payload;\n      return state.filter(service => service.id !== id);\n\n      case FILTER_SERVICE_FIELD:\n        const { value } = action.payload;\n        if (value === \"\") {\n          return initialState;\n        } else {\n          // eslint-disable-next-line array-callback-return\n          return state.filter((service) => {\n            if (service.name.includes(value)) {\n              return service.name;\n            }\n          });\n        }\n  \n    default:\n      return state;\n  }\n}\n","import {\n    CHANGE_SERVICE_FIELD,\n    ADD_SERVICE,\n    EDIT_SERVICE,\n    REMOVE_SERVICE,\n    CANCEL_SERVICE,\n  } from \"../actions/actionTypes\";\n  \n  const initialState = {\n    id: null,\n    name: \"\",\n    price: \"\",\n  };\n  \n  export default function serviceAddReducer(state = initialState, action) {\n    switch (action.type) {\n      case CHANGE_SERVICE_FIELD:\n        const { name, value } = action.payload;\n        return {\n          ...state,\n          [name]: value,\n        };\n      case ADD_SERVICE:\n      case CANCEL_SERVICE: {\n        return { ...initialState };\n      }\n      case EDIT_SERVICE: {\n        const { id, name, price } = action.payload;\n        return { ...state, id, name, price };\n      }\n      case REMOVE_SERVICE: {\n        const { id } = action.payload;\n        return state.id === id ? { ...initialState } : state;\n      }\n      default:\n        return state;\n    }\n  }\n  ","import { FILTER_SERVICE_FIELD } from \"../actions/actionTypes.js\";\n\nconst initialState = {\n  value: \"\",\n};\n\nexport default function serviceFilterReducer(state = initialState, action) {\n\n  switch (action.type) {\n    case FILTER_SERVICE_FIELD:\n      const { value } = action.payload;\n      return { value };\n      // return {...initialState}\n    default:\n      return state;\n  }\n}\n","import { createStore, combineReducers } from \"redux\";\nimport serviceListReducer from \"../reducers/serviceList\";\nimport serviceAddReducer from \"../reducers/serviceAdd\";\nimport serviceFilterReducer from \"../reducers/serviceFilter\";\n\nconst reducer = combineReducers({\n  serviceList: serviceListReducer,\n  serviceAdd: serviceAddReducer,\n  serviceFilter: serviceFilterReducer,\n});\n\nconst store = createStore(\n  reducer,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\n\nexport default store;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport store from \"./store\";\nimport { Provider } from \"react-redux\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();"],"sourceRoot":""}